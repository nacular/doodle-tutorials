"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[881],{2650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>x,frontMatter:()=>u,metadata:()=>v,toc:()=>g});var t=o(4848),i=o(8453),a=o(1470),r=o(9365);const l='plugins {\n    kotlin("multiplatform"          )\n    alias(libs.plugins.serialization)\n}\n\nkotlin {\n    // Defined in buildSrc/src/main/kotlin/Common.kt\n    jsTargets    ()\n    wasmJsTargets()\n    jvmTargets   ()\n\n    sourceSets {\n        commonMain.dependencies {\n            api(libs.coroutines.core   )\n            api(libs.serialization.json)\n\n            api(libs.doodle.themes     )\n            api(libs.doodle.controls   )\n        }\n\n        jsTest.dependencies {\n            implementation(kotlin("test-js"))\n        }\n\n        jvmTest.dependencies {\n            implementation(kotlin("test-junit"))\n            implementation(libs.bundles.test.libs)\n        }\n    }\n}',s='plugins {\n    kotlin("multiplatform")\n    application\n}\n\nkotlin {\n    jsTargets    (executable = true)\n    wasmJsTargets(executable = true)\n    jvmTargets   (                 )\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(":Todo"))\n        }\n\n        jsMain.dependencies {\n            implementation(libs.doodle.browser)\n        }\n\n        val wasmJsMain by getting {\n            dependencies {\n                implementation(libs.doodle.browser)\n            }\n        }\n\n        jvmMain.dependencies {\n            when (osTarget()) {\n                "macos-x64"     -> implementation(libs.doodle.desktop.jvm.macos.x64    )\n                "macos-arm64"   -> implementation(libs.doodle.desktop.jvm.macos.arm64  )\n                "linux-x64"     -> implementation(libs.doodle.desktop.jvm.linux.x64    )\n                "linux-arm64"   -> implementation(libs.doodle.desktop.jvm.linux.arm64  )\n                "windows-x64"   -> implementation(libs.doodle.desktop.jvm.windows.x64  )\n                "windows-arm64" -> implementation(libs.doodle.desktop.jvm.windows.arm64)\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("MainKt")\n}\n\ninstallFullScreenDemo("Development")\ninstallFullScreenDemo("Production" )',d='package io.nacular.doodle.examples\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.buttons.Button\nimport io.nacular.doodle.controls.buttons.HyperLink\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.list.MutableList\nimport io.nacular.doodle.controls.list.listEditor\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.theme.CommonLabelBehavior\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.core.Container\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.container\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.Color.Companion.Transparent\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.Font.Style.Italic\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.drawing.PatternPaint\nimport io.nacular.doodle.drawing.Stroke\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.height\nimport io.nacular.doodle.drawing.opacity\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.drawing.rect\nimport io.nacular.doodle.event.PointerListener.Companion.released\nimport io.nacular.doodle.examples.DataStore.DataStoreListModel\nimport io.nacular.doodle.examples.DataStore.Filter\nimport io.nacular.doodle.examples.DataStore.Filter.Active\nimport io.nacular.doodle.examples.DataStore.Filter.Completed\nimport io.nacular.doodle.focus.FocusManager\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.image.Image\nimport io.nacular.doodle.image.ImageLoader\nimport io.nacular.doodle.layout.Insets\nimport io.nacular.doodle.layout.constraints.Strength.Companion.Strong\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.adhoc.DynamicTheme\nimport io.nacular.doodle.theme.basic.list.BasicListBehavior\nimport io.nacular.doodle.theme.basic.list.BasicVerticalListPositioner\nimport io.nacular.doodle.theme.basic.list.TextEditOperation\nimport io.nacular.doodle.theme.basic.list.basicItemGenerator\nimport io.nacular.doodle.theme.native.NativeHyperLinkStyler\nimport io.nacular.doodle.utils.Dimension.Height\nimport io.nacular.doodle.utils.Encoder\nimport io.nacular.doodle.utils.diff.Delete\nimport io.nacular.doodle.utils.diff.Insert\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.launch\nimport kotlin.Result.Companion.success\nimport kotlin.math.min\n\n/**\n * This app is designed to run both top-level and nested. The filter buttons use hyperlinks in the spec,\n * but we will delegate their definition to the app creator to allow a different approach when nested\n * (i.e. using buttons instead of hyperlinks).\n *\n * The app will then use this provider to create the filter buttons.\n */\ninterface FilterButtonProvider {\n    operator fun invoke(text: String, filter: Filter? = null, behavior: Behavior<Button>): Button\n}\n\n/**\n * Default implementation intended for use when app is top-level. It handles routing and provides\n * hyperlinks for the filter buttons.\n */\nclass LinkFilterButtonProvider(private val dataStore: DataStore, router: Router, private val linkStyler: NativeHyperLinkStyler): FilterButtonProvider {\n    init {\n        router["/"         ] = { dataStore.filter = null      }\n        router["/active"   ] = { dataStore.filter = Active    }\n        router["/completed"] = { dataStore.filter = Completed }\n        router.fireAction()\n    }\n\n    override fun invoke(text: String, filter: Filter?, behavior: Behavior<Button>): Button {\n        val url = when (filter) {\n            Active    -> "#/active"\n            Completed -> "#/completed"\n            else      -> "#/"\n        }\n\n        return HyperLink(url = url, text = text).apply {\n            this.behavior            = linkStyler(this, behavior) as Behavior<Button>\n            this.acceptsThemes       = false\n            dataStore.filterChanged += { rerender() }\n        }\n    }\n}\n\n/**\n * General styling config\n */\ndata class TodoConfig(\n    val listFont              : Font,\n    val titleFont             : Font,\n    val lineColor             : Color  = Color(0xEDEDEDu),\n    val filterFont            : Font,\n    val footerFont            : Font,\n    val headerColor           : Color  = Color(0xAF2F2Fu) opacity 0.15f,\n    val deleteColor           : Color  = Color(0xCC9A9Au),\n    val appBackground         : Color  = Color(0xF5F5F5u),\n    val boldFooterFont        : Font,\n    val selectAllColor        : Color  = Color(0x737373u),\n    val checkForeground       : Image,\n    val checkBackground       : Image,\n    val placeHolderFont       : Font,\n    val placeHolderText       : String = "What needs to be done?",\n    val placeHolderColor      : Color  = Color(0xE6E6E6u),\n    val labelForeground       : Color  = Color(0x4D4D4Du),\n    val footerForeground      : Color  = Color(0xBFBFBFu),\n    val deleteHoverColor      : Color  = Color(0xAF5B5Eu),\n    val taskCompletedColor    : Color  = Color(0xD9D9D9u),\n    val clearCompletedText    : String = "Clear completed",\n    val textFieldBackground   : Color  = White,\n    val filterButtonForeground: Color  = Color(0x777777u),\n)\n\n/**\n * A [TextEditOperation] that translates a String to a [Task]. It also customizes the textField to fit the app\'s styling\n */\nprivate class TaskEditOperation(focusManager: FocusManager?, list: MutableList<Task, *>, task: Task, current: View): TextEditOperation<Task>(focusManager, TaskEncoder(task.completed), list, task, current) {\n    private class TaskEncoder(private val completed: Boolean = false): Encoder<Task, String> {\n        override fun decode(b: String) = success(Task(b, completed))\n        override fun encode(a: Task  ) = success(a.text)\n    }\n\n    init {\n        textField.fitText         = emptySet()\n        textField.backgroundColor = Transparent\n    }\n\n    override fun invoke() = container {\n        children += textField\n        layout    = constrain(textField) { it.edges eq parent.edges + Insets(top = 1.0, left = 58.0, bottom = 1.0) }\n    }\n}\n\n/**\n * This is the main view of the app. It contains all the visual elements.\n *\n * @property config that provides styling and resources (i.e. font, images)\n * @property dataStore that tracks the overall state of tasks\n * @property linkStyler used to wrap our custom Hyperlink Behavior in a native one so we get the default link behavior as well\n * @property textMetrics used to measure text\n * @property focusManager used to control focus in the app\n * @property filterButtonProvider used to create the filter buttons\n */\nprivate class TodoView(private val config              : TodoConfig,\n                       private val dataStore           : DataStore,\n                       private val linkStyler          : NativeHyperLinkStyler,\n                       private val textMetrics         : TextMetrics,\n                       private val focusManager        : FocusManager,\n                       private val filterButtonProvider: FilterButtonProvider): View() {\n\n    init {\n        val header = Label("todos").apply {\n            font            = config.titleFont\n            behavior        = CommonLabelBehavior(textMetrics)\n            acceptsThemes   = false\n            foregroundColor = config.headerColor\n        }\n        lateinit var list: View\n        val footer   = Footer(textMetrics, linkStyler, config)\n        val taskList = object: Container() {\n            init {\n                clipCanvasToBounds = false\n\n                // Maps tasks to TaskRow and updates them when recycled\n                val visualizer = itemVisualizer<Task, IndexedItem> { item, previous, _ ->\n                    when (previous) {\n                        is TaskRow -> previous.also { it.task = item }\n                        else       -> TaskRow(config, dataStore, item)\n                    }\n                }\n\n                // List containing Tasks. It is mutable since items can be edited\n                list = MutableList(DataStoreListModel(dataStore), itemVisualizer = visualizer, fitContent = setOf(Height)).apply {\n                    val rowHeight = 58.0\n                    font          = config.listFont\n                    cellAlignment = fill\n                    editor        = listEditor { list, row, _, current -> TaskEditOperation(focusManager, list, row, current) }\n                    behavior      = BasicListBehavior(focusManager,\n                        basicItemGenerator {\n                            // edit when double-clicked\n                            pointerChanged += released { event ->\n                                if (event.clickCount >= 2) { this@apply.startEditing(index).also { event.consume() } }\n                            }\n                        },\n                        BasicVerticalListPositioner(rowHeight),\n                        PatternPaint(Size(10.0, rowHeight)) {\n                            rect(Rectangle(size = this.size), color = White)\n                            line(Point(y = 1), Point(10, 1), Stroke(config.lineColor))\n                        },\n                    )\n\n                    itemsChanged += { _, differences ->\n                        // Scroll when a single item added\n                        var numAdded    = 0\n                        var numRemoved  = 0\n                        var indexInList = 0\n\n                        differences.forEach {\n                            when (it) {\n                                is Insert -> {\n                                    if (it.items.size > 1) {\n                                        return@forEach\n                                    }\n\n                                    ++numAdded\n                                    ++indexInList\n                                }\n                                is Delete -> {\n                                    numRemoved += it.items.size\n                                }\n                                else      -> indexInList += it.items.size\n                            }\n                        }\n\n                        if (numAdded == 1 && numRemoved <= 1) {\n                            scrollTo(indexInList)\n                        }\n                    }\n\n                    boundsChanged += { _, old, new ->\n                        if (old.width != new.width || old.height != new.height) {\n                            this@TodoView.relayout()\n                        }\n                    }\n                }\n\n                children += listOf(\n                    TaskCreationBox(focusManager, textMetrics, config, dataStore),\n                    ScrollPanel    (list).apply { contentWidthConstraints = { it eq width - verticalScrollBarWidth } },\n                    FilterBox      (config, dataStore, textMetrics, filterButtonProvider)\n                )\n\n                layout = constrain(children[0], children[1], children[2]) { input, panel, filter ->\n                    listOf(input, panel, filter).forEach { it.width eq parent.width }\n                    input.top     eq 0\n                    input.height.preserve\n                    panel.top     eq input.bottom\n\n                    if (children[2].visible) {\n                        filter.top    eq panel.bottom\n                        filter.bottom eq parent.bottom\n                        filter.height.preserve\n                    }\n                }\n            }\n\n            override fun render(canvas: Canvas) {\n                canvas.outerShadow(vertical =  2.0, blurRadius =  4.0, color = Black opacity 0.2f) {\n                    outerShadow   (vertical = 25.0, blurRadius = 50.0, color = Black opacity 0.1f) {\n                        // Create stacked effect\n                        if (!dataStore.isEmpty) {\n                            rect(bounds.atOrigin.inset(Insets(top = height, left = 8.0, right = 8.0, bottom = -8.0)), color = White)\n                            rect(bounds.atOrigin.inset(Insets(top = height, left = 4.0, right = 4.0, bottom = -4.0)), color = White)\n                        }\n                        rect(bounds.atOrigin, color = White)\n                    }\n                }\n            }\n        }\n\n        children += listOf(header, taskList, footer)\n\n        list.boundsChanged += { _,_,_ -> doLayout() }\n\n        layout = constrain(header, taskList, footer) { header, body, footer ->\n            listOf(header, body, footer).forEach { it.centerX eq parent.centerX }\n            header.top    eq        9\n            header.height.preserve\n\n            val minHeight = taskList.children[0].height + (taskList.children[2].takeIf { it.visible }?.height ?: 0.0)\n\n            body.top    eq header.bottom + 5\n            body.width  eq min(550.0, parent.width - 10)\n            body.height eq minHeight + list.height\n\n            footer.top   eq body.bottom + 65\n            footer.width eq body.width\n            footer.height.preserve\n            (footer.bottom lessEq parent.bottom) .. Strong\n        }\n    }\n}\n\n/**\n * Todo App based on TodoMVC\n */\nclass TodoApp(display             : Display,\n              uiDispatcher        : CoroutineDispatcher,\n              fonts               : FontLoader,\n              theme               : DynamicTheme,\n              themes              : ThemeManager,\n  private val images              : ImageLoader,\n              dataStore           : DataStore,\n              linkStyler          : NativeHyperLinkStyler,\n              textMetrics         : TextMetrics,\n              focusManager        : FocusManager,\n              filterButtonProvider: FilterButtonProvider): Application {\n//sampleStart\n    init {\n        val appScope = CoroutineScope(SupervisorJob() + Dispatchers.Default)\n\n        // Launch coroutine to fetch fonts/images\n        appScope.launch(uiDispatcher) {\n            val titleFont  = fonts            { size = 100; weight = 100; families = listOf("Helvetica Neue", "Helvetica", "Arial", "sans-serif") }!!\n            val listFont   = fonts(titleFont) { size =  24 }!!\n            val footerFont = fonts(titleFont) { size =  10 }!!\n            val config     = TodoConfig(\n                listFont        = listFont,\n                titleFont       = titleFont,\n                footerFont      = footerFont,\n                filterFont      = fonts(titleFont ) { size   = 14     }!!,\n                boldFooterFont  = fonts(footerFont) { weight = 400    }!!,\n                placeHolderFont = fonts(listFont  ) { style  = Italic }!!,\n                checkForeground = checkForegroundImage(),\n                checkBackground = checkBackgroundImage(),\n            )\n\n            // install theme\n            themes.selected = theme\n\n            display += TodoView(config, dataStore, linkStyler, textMetrics, focusManager, filterButtonProvider)\n\n            display.layout = constrain(display.children[0]) { it.edges eq parent.edges }\n\n            display.fill(config.appBackground.paint)\n        }\n    }\n//sampleEnd\n\n    override fun shutdown() {}\n\n    private suspend fun checkForegroundImage() = images.load("data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23bddad5%22%20stroke-width%3D%223%22/%3E%3Cpath%20fill%3D%22%235dc2af%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22/%3E%3C/svg%3E")!!\n    private suspend fun checkBackgroundImage() = images.load("data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23ededed%22%20stroke-width%3D%223%22/%3E%3C/svg%3E")!!\n}',c='package io.nacular.doodle.examples\n\nimport io.nacular.doodle.application.Modules.Companion.FontModule\nimport io.nacular.doodle.application.Modules.Companion.ImageModule\nimport io.nacular.doodle.application.Modules.Companion.KeyboardModule\nimport io.nacular.doodle.application.Modules.Companion.PointerModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.coroutines.Dispatchers\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicLabelBehavior\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeHyperLinkBehavior\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeScrollPanelBehavior\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeTextFieldBehavior\nimport kotlinx.browser.window\nimport org.kodein.di.DI.Module\nimport org.kodein.di.bindSingleton\nimport org.kodein.di.instance\n\n/**\n * Creates a [TodoApp]\n */\n//sampleStart\nfun main() {\n    application(modules = listOf(\n        FontModule,\n        PointerModule,\n        KeyboardModule,\n        ImageModule,\n        basicLabelBehavior(),\n        nativeTextFieldBehavior(),\n        nativeHyperLinkBehavior(),\n        nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            bindSingleton<PersistentStore> { LocalStorePersistence() }\n            bindSingleton { DataStore(instance()) }\n            bindSingleton<Router> { TrivialRouter(window) }\n            bindSingleton<FilterButtonProvider> { LinkFilterButtonProvider(instance(), instance(), instance()) }\n        }\n    )) {\n        // load app\n        TodoApp(\n            display              = instance(),\n            fonts                = instance(),\n            theme                = instance(),\n            themes               = instance(),\n            images               = instance(),\n            dataStore            = instance(),\n            linkStyler           = instance(),\n            textMetrics          = instance(),\n            focusManager         = instance(),\n            uiDispatcher         = Dispatchers.UI,\n            filterButtonProvider = instance()\n        )\n    }\n}\n//sampleEnd';var p=o(854),h=o(9053);const u={title:"Todo",hide_title:!0},m="Todo Tutorial",v={id:"todo",title:"Todo",description:"This tutorial shows how you might build the TodoMVC app using Doodle. This version deviates from the official app spec in that (like all Doodle apps) it does not use CSS or HTML directly. Therefore, it does not include the assets provided by the official spec. Instead, it replicates the UX with Doodle primitives.",source:"@site/docs/todo.mdx",sourceDirName:".",slug:"/todo",permalink:"/doodle-tutorials/docs/todo",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Todo",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Calculator",permalink:"/doodle-tutorials/docs/calculator"},next:{title:"Photos",permalink:"/doodle-tutorials/docs/photos"}},f={},g=[{value:"Project Setup",id:"project-setup",level:2},{value:"Defining Our Application",id:"defining-our-application",level:2},{value:"Creating A Fullscreen App",id:"creating-a-fullscreen-app",level:2},{value:"Supporting Docs Embedding",id:"supporting-docs-embedding",level:2}];function b(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"todo-tutorial",children:[(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/tree/master/Todo",children:"Todo"})," Tutorial"]}),"\n",(0,t.jsxs)(n.p,{children:["This tutorial shows how you might build the ",(0,t.jsx)(n.a,{href:"http://todomvc.com",children:"TodoMVC"})," app using Doodle. This version deviates from the official app spec in that (like all Doodle apps) it does not use CSS or HTML directly. Therefore, it does not include the assets provided by the official spec. Instead, it replicates the UX with Doodle primitives."]}),"\n",(0,t.jsx)(n.p,{children:"This version is also designed to work well as an embedded app. The version below (unlike the full-screen version) does not use routing for the filters. This means there is no way to deep-link to a filter, like the full-screen version has. The launch code decides this by injecting a different strategy for creating the filter buttons, while the app itself is unaware of this difference."}),"\n",(0,t.jsx)(h.I,{function:"todo",height:"700"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also see the full-screen app here: ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle-tutorials/todo",children:"JavaScript"}),", ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle-tutorials/todo_wasm",children:"WebAssembly"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,t.jsxs)(n.p,{children:["We will use a multi-platform library setup for this app, with a multiplatform launcher that depends on it. This is not necessary to use Doodle. You could create a single multiplatform build with the common parts of your app in ",(0,t.jsx)(n.code,{children:"commonMain"})," etc.. This setup is used here because these apps are also launched by an app within ",(0,t.jsx)(n.code,{children:"DocApps"})," when embedding them like below. Therefore, we need a pure library for each app. This is why there is an app and a runner."]}),"\n",(0,t.jsx)(n.mermaid,{value:" classDiagram\n      Todo      <|-- TodoRunner\n      Todo      <|-- DocApps\n      TodoRunner: jvmMain.main\n      TodoRunner: jsMain.main\n      DocApps   : main"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsxs)(r.A,{value:"Todo",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/build.gradle.kts",children:(0,t.jsx)(n.strong,{children:"build.gradle.kts"})})}),(0,t.jsx)(p.v,{children:l})]}),(0,t.jsxs)(r.A,{value:"TodoRunner",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/TodoRunner/build.gradle.kts",children:(0,t.jsx)(n.strong,{children:"build.gradle.kts"})})}),(0,t.jsx)(p.v,{children:s})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Build uses ",(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/gradle/libs.versions.toml",children:"libs.versions.toml"})," file."]})}),"\n",(0,t.jsx)(n.h2,{id:"defining-our-application",children:"Defining Our Application"}),"\n",(0,t.jsxs)(n.p,{children:["All Doodle apps must implement the ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/applications",children:(0,t.jsx)(n.code,{children:"Application"})})," interface. The framework will then initialize our app via the constructor."]}),"\n",(0,t.jsxs)(n.p,{children:["Doodle apps can be defined in ",(0,t.jsx)(n.code,{children:"commonMain"}),", since they do not require any platform-specific dependencies. Therefore, we will do the same and place ours in ",(0,t.jsx)(n.code,{children:"commonMain/kotlin/io/nacular/doodle/examples"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/src/commonMain/kotlin/io/nacular/doodle/examples/TodoApp.kt#L11",children:(0,t.jsx)(n.strong,{children:"TodoApp.kt"})})}),"\n",(0,t.jsx)(p.v,{children:d}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Notice that ",(0,t.jsx)(n.code,{children:"shutdown"})," is a no-op, since we don't have any cleanup to do when the app closes."]})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-fullscreen-app",children:"Creating A Fullscreen App"}),"\n",(0,t.jsxs)(n.p,{children:["Doodle apps can be ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/applications",children:"launched"})," in a few different ways. We create a helper to launch the app in ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/applications#top-level-apps",children:"full screen"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/TodoRunner/src/jsMain/kotlin/main.kt#L21",children:(0,t.jsx)(n.strong,{children:"main.kt"})})}),"\n",(0,t.jsx)(p.v,{children:c}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Normally this would just be your ",(0,t.jsx)(n.code,{children:"main"})," function. But ",(0,t.jsx)(n.code,{children:"main"})," would prevent the app from being used as a library. Which is what happens to allow both an embedded (in the docs) and full-screen version."]})}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"application"})," function to launch top-level apps. It takes a list of modules, and a lambda that builds the app. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via ",(0,t.jsx)(n.code,{children:"instance"}),", ",(0,t.jsx)(n.code,{children:"provider"}),", etc."]}),"\n",(0,t.jsxs)(n.p,{children:["Notice that we have included several modules for our app. This includes one for fonts, pointer, keyboard, and several for various View ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/rendering/behaviors",children:(0,t.jsx)(n.code,{children:"Behaviors"})})," (i.e. ",(0,t.jsx)(n.a,{href:"https://nacular.github.io/doodle-api/browser/io.nacular.doodle.theme.native/-native-theme/-companion/native-text-field-behavior.html",children:(0,t.jsx)(n.code,{children:"nativeTextFieldBehavior()"})}),") which loads the native behavior for TextFields. We also define some bindings directly in a new module. These are items with no built-in module, or items that only exist in our app code."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Check out Kodein to learn more about how it handles dependency injection."})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"application"})," function also takes an optional HTML element within which the app will be hosted. The app will be hosted in ",(0,t.jsx)(n.code,{children:"document.body"})," if you do not specify an element."]}),"\n",(0,t.jsx)(n.p,{children:"App launching is the only part of our code that is platform-specific; since it is the only time we might care about an HTML element. It also helps support embedding apps into non-Doodle contexts."}),"\n",(0,t.jsx)(n.h2,{id:"supporting-docs-embedding",children:"Supporting Docs Embedding"}),"\n",(0,t.jsxs)(n.p,{children:["These docs actually launch the app using a custom ",(0,t.jsx)(n.code,{children:"main"})," with a slightly different set of inputs. The big difference is in ",(0,t.jsx)(n.code,{children:"FilterButtonProvider"})," used. The docs inject a provider that creates ",(0,t.jsx)(n.code,{children:"PushButton"}),"s instead of ",(0,t.jsx)(n.code,{children:"HyperLink"}),"s for the filter controls. The app itself treats these the same. The end result is that the docs version does not use routing."]}),"\n",(0,t.jsx)(p.v,{children:'\n// Notice the element is provided for embedded version\napplication(root = element, modules = listOf(FontModule, PointerModule, KeyboardModule, basicLabelBehavior(),\n        nativeTextFieldBehavior(), nativeHyperLinkBehavior(), nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            // ...\n\n            // Different behavior for docs version\n            bind<FilterButtonProvider>() with singleton { EmbeddedFilterButtonProvider(instance()) }\n        }\n)) {\n    // load app just like full-screen\n    TodoApp(instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance())\n}\n'})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}}}]);