"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[971],{8401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>u,toc:()=>h});var o=t(7462),a=(t(7294),t(3905)),i=t(8561),r=t(5488),l=t(5162),s=t(3138);const p={title:"Photos",hide_title:!0},d="[Photos](https://github.com/nacular/doodle-tutorials/tree/master/Photos) Tutorial",u={unversionedId:"photos",id:"photos",title:"Photos",description:"We will build a simple photo app that lets you view and manipulate images using a pointer or multi-touch. Images will be added to the app via drag-drop.",source:"@site/docs/photos.mdx",sourceDirName:".",slug:"/photos",permalink:"/doodle-tutorials/docs/photos",draft:!1,tags:[],version:"current",frontMatter:{title:"Photos",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Todo",permalink:"/doodle-tutorials/docs/todo"},next:{title:"Photo Stream",permalink:"/doodle-tutorials/docs/photostream"}},c={},h=[{value:"Project Setup",id:"project-setup",level:2},{value:"The Application",id:"the-application",level:2},{value:"Creating A Full Screen App",id:"creating-a-full-screen-app",level:2},{value:"Drag-drop Support",id:"drag-drop-support",level:2},{value:"Importing An Image",id:"importing-an-image",level:2},{value:"Using Gestures",id:"using-gestures",level:2},{value:"Capturing Initial Gesture State",id:"capturing-initial-gesture-state",level:3},{value:"Handling Gesture Updates",id:"handling-gesture-updates",level:3}],m={toc:h};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"photos-tutorial"},(0,a.kt)("a",{parentName:"h1",href:"https://github.com/nacular/doodle-tutorials/tree/master/Photos"},"Photos")," Tutorial"),(0,a.kt)("p",null,"We will build a simple photo app that lets you view and manipulate images using a pointer or multi-touch. Images will be added to the app via drag-drop.\nYou can then move, size, and rotate them with a mouse, pointer, touch, or via an info overlay."),(0,a.kt)("p",null,"Here is the end result."),(0,a.kt)(s.B,{functionName:"photos",height:"700",mdxType:"DoodleCodeBlock"}),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can also see the full-screen app ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-tutorials/photos"},"here"),".")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"project-setup"},"Project Setup"),(0,a.kt)("p",null,"We will use a multi-platform library setup for this app, with a multiplatform launcher that depends on it.\nThis is not necessary to use Doodle. You could create a single multiplatform build with the common parts of your app\nin ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain")," etc.. This setup is used here because these apps are also launched by an app within ",(0,a.kt)("inlineCode",{parentName:"p"},"DocApps")," when embedding them\nlike below. Therefore, we need a pure library for each app. This is why there is an app and a runner."),(0,a.kt)(i.G,{chart:" classDiagram\n      Photos      <|-- PhotosRunner\n      Photos      <|-- DocApps\n      PhotosRunner: jvmMain.main\n      PhotosRunner: jsMain.main\n      DocApps     : main",mdxType:"Mermaid"}),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"app",label:"Photos",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Photos/build.gradle.kts"},(0,a.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    kotlin("multiplatform")\n}\n\nkotlin {\n    jsTargets()\n\n    // Defined in gradle.properties\n    val doodleVersion    : String by project\n    val coroutinesVersion: String by project\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation("org.jetbrains.kotlin:kotlin-stdlib-js")\n                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutinesVersion") // async image loading\n\n                implementation("io.nacular.doodle:core:$doodleVersion"     ) // required for Doodle\n                implementation("io.nacular.doodle:controls:$doodleVersion" ) // provides things like buttons and panels\n                implementation("io.nacular.doodle:animation:$doodleVersion") // animations\n                implementation("io.nacular.doodle:themes:$doodleVersion"   ) // for Basic theme\n            }\n        }\n    }\n}\n'))),(0,a.kt)(l.Z,{value:"runner",label:"PhotosRunner",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/PhotosRunner/build.gradle.kts"},(0,a.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'plugins {\n    kotlin("multiplatform")\n    application\n}\n\nkotlin {\n    js().browser()\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion: String by project\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(project(":Photos")) // app library\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion") // required for Web app\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val osArch = System.getProperty("os.arch")\n                val targetArch = when (osArch) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "${targetOs}-${targetArch}"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // required for Desktop app\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("io.nacular.doodle.examples.MainKt")\n}\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"the-application"},"The Application"),(0,a.kt)("p",null,"All Doodle apps must implement the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/application/Application.kt#L4"},(0,a.kt)("inlineCode",{parentName:"a"},"Application")),"\ninterface. The framework will then initialize our app via the constructor."),(0,a.kt)("p",null,"The app's structure is fairly simple. It has a main Container that holds the images and supports drag-drop, and a panel with controls for manipulating\na selected image."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Photos/src/commonMain/kotlin/io/nacular/doodle/examples/PhotosApp.kt#L11"},(0,a.kt)("strong",{parentName:"a"},"PhotosApp.kt"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PhotosApp(/*...*/): Application {\n    init {\n        // ...\n\n        val panelToggle                 // Button used to show/hide the panel\n        val panel                       // Has controls for manipulating images\n        val mainContainer = container { // container that holds images\n            // ...\n\n            dropReceiver = object: DropReceiver {\n                // support drag-drop importing\n            }\n\n            GlobalScope.launch {\n                listOf("tetons.jpg", "earth.jpg").forEachIndexed { index, file ->\n                    // load default images\n                }\n            }\n        }\n\n        display += listOf(mainContainer, panel, panelToggle)\n\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"shutdown")," is a no-op, since we don't have any cleanup to do when the app closes.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"creating-a-full-screen-app"},"Creating A Full Screen App"),(0,a.kt)("p",null,"Doodle apps can be ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications"},"launched")," in a few different ways.\nWe create a helper to launch the app in ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications#top-level-apps"},"full screen"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Photos/src/main/kotlin/io/nacular/doodle/examples/FullScreen.kt#L22"},(0,a.kt)("strong",{parentName:"a"},"FullScreen.kt"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'package io.nacular.doodle.examples\n\n//...\n\nfun fullscreen() {\n    application(modules = listOf(\n        FocusModule,\n        KeyboardModule,\n        DragDropModule,\n        basicLabelBehavior(),\n        nativeTextFieldBehavior(spellCheck = false),\n        basicMutableSpinnerBehavior(),\n        basicCircularProgressIndicatorBehavior(thickness = 18.0),\n        Module(name = "AppModule") {\n            bindSingleton<Animator>    { AnimatorImpl   (instance(), instance()) }\n            bindSingleton<ImageLoader> { ImageLoaderImpl(instance(), instance()) }\n        }\n    )) {\n        // load app\n        PhotosApp(instance(), instance(), instance(), instance(), instance(), instance())\n    }\n}\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Normally this would just be your ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function. But ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," would prevent the app from being used as a library. Which\nis what happens to allow both an embedded (in the docs) and full-screen version.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"application")," function launches apps. It takes a list of modules, and a lambda that builds the\napp. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via\n",(0,a.kt)("inlineCode",{parentName:"p"},"instance"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"provider"),", etc."),(0,a.kt)("p",null,"Notice that we have included several modules for our app. This includes one for focus, keyboard, drag-drop and several for various\nView ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L7"},(0,a.kt)("inlineCode",{parentName:"a"},"Behaviors")),"\n(i.e. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L108"},(0,a.kt)("inlineCode",{parentName:"a"},"nativeTextFieldBehavior()")),")\nwhich loads the native behavior for TextFields. We also define some bindings directly in a new module. These are items with no\nbuilt-in module, or items that only exist in our app code."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Check out Kodein to learn more about how it handles dependency injection.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"application")," function also takes an optional HTML element within which the app will be hosted. The app will be hosted in\n",(0,a.kt)("inlineCode",{parentName:"p"},"document.body")," if you do not specify an element."),(0,a.kt)("p",null,"App launching is the only part of our code that is platform-specific; since it is the only time we might care\nabout an HTML element. It also helps support embedding apps into non-Doodle contexts."),(0,a.kt)("h2",{id:"drag-drop-support"},"Drag-drop Support"),(0,a.kt)("p",null,"Drag-drop support requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"DragDropModule")," (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L94"},"Browser")," or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Desktop/src/jvmMain/kotlin/io/nacular/doodle/application/Modules.kt#L81"},"Desktop")," to work. It then requires setting up drag/drop recognizers on the source/target Views. We created\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"mainContainer")," for this. You can see that the ",(0,a.kt)("inlineCode",{parentName:"p"},"dropReceiver")," property is set to a ",(0,a.kt)("inlineCode",{parentName:"p"},"DropReceiver")," that controls how the ",(0,a.kt)("inlineCode",{parentName:"p"},"mainContainer")," handles\ndrop events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PhotosApp(/*...*/ private val images: ImageLoader /*...*/): Application {\n    init {\n        // ...\n        val mainContainer = container {\n            // ...\n\n            dropReceiver = object: DropReceiver {\n                private  val allowedFileTypes                    = Files(ImageType("jpg"), ImageType("jpeg"), ImageType("png"))\n                override val active                              = true\n                private  fun allowed          (event: DropEvent) = allowedFileTypes in event.bundle\n                override fun dropEnter        (event: DropEvent) = allowed(event)\n                override fun dropOver         (event: DropEvent) = allowed(event)\n                override fun dropActionChanged(event: DropEvent) = allowed(event)\n                override fun drop             (event: DropEvent) = event.bundle[allowedFileTypes]?.let { files ->\n                    val photos = files.map { GlobalScope.async { images.load(it)?.let { FixedAspectPhoto(it) } } }\n\n                    GlobalScope.launch {\n                        photos.mapNotNull { it.await() }.forEach { photo ->\n                            import(photo, event.location)\n                        }\n                    }\n                    true\n                } ?: false\n            }\n        }\n    }\n\n    // ...\n}\n')),(0,a.kt)("p",null,"Our ",(0,a.kt)("inlineCode",{parentName:"p"},"DropReceiver")," specifies the supported file-types (jpg, jpeg, and png). It then checks that any drop event contains valid files before accepting it. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"drop(event: DropEvent)")," method is called when the user attempts the final drop. Here, the receiver fetches all the allowed files in the bundle,\nand tries to load and import each one. Notice that the receiver converts raw Image returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageLoader")," into a ",(0,a.kt)("inlineCode",{parentName:"p"},"FixedAspectPhoto"),"."),(0,a.kt)("h2",{id:"importing-an-image"},"Importing An Image"),(0,a.kt)("p",null,"We import images using a local ",(0,a.kt)("inlineCode",{parentName:"p"},"import")," function inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"mainContainer")," creation block. This simplifies access to local state. The ",(0,a.kt)("inlineCode",{parentName:"p"},"import"),"\nfunction takes a photo, which is a ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),", and a location to place it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val import = { photo: View, location: Point ->\n\n}\n")),(0,a.kt)("p",null,"Import resizes and centers the photo at the given point. It is center-rotates it between -15\xb0 and 15\xb0. Finally, a listener is added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"pressed"),"\npointer event. This moves the photo to the foreground and updates the panel."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"photo.width           = 400.0\nphoto.position        = location - Point(photo.width / 2, photo.height / 2)\nphoto.transform       = Identity.rotate(location, (Random.nextFloat() * 30 - 15) * degrees)\nphoto.pointerChanged += pressed {\n    children.move(photo, to = children.size - 1)\n    panel.setPhoto(photo)\n}\n")),(0,a.kt)("h2",{id:"using-gestures"},"Using Gestures"),(0,a.kt)("p",null,"Import also registers a custom gesture listener to support multi-touch scaling and rotations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"GestureRecognizer(photo).changed += object: GestureListener<GestureEvent> {\n    // ...\n\n    override fun started(event: GestureEvent) {\n        // capture initial state\n        event.consume()\n    }\n\n    override fun changed(event: GestureEvent) {\n        // 1) calculate rotation angle\n        // 2) update photo transform to include rotation\n        // 3) update photo bounds based on scaling\n        event.consume()\n    }\n\n    override fun ended(event: GestureEvent) {\n        // simply consume event\n        event.consume()\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GestureRecognizer")," takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," and emits events whenever it detects motion from 2 or more pointers in that ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),". It also calculates\na scale value by comparing the distance between the selected pointers over time."),(0,a.kt)("p",null,"We register a listener that uses the events to update the photo's ",(0,a.kt)("inlineCode",{parentName:"p"},"transform")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bounds"),". The listener also consumes events to avoid\nthem making it to subsequent pointer listeners (the ",(0,a.kt)("inlineCode",{parentName:"p"},"Resizer")," used for single pointer manipulation in this case)."),(0,a.kt)("h3",{id:"capturing-initial-gesture-state"},"Capturing Initial Gesture State"),(0,a.kt)("p",null,"We record the state of our photo, and the pointers provided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"GestureRecognizer")," on the ",(0,a.kt)("inlineCode",{parentName:"p"},"started")," event. Notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"GestureRecognizer"),"\nprovides locations in the photo's local coordinate. This makes sense for a general-purpose utility and matches the way Doodle reports\npointer events. We use these values to modify the photo's bounds though, which is defined in its parent's coordinates. So we map the points\ninto the parent before our calculations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun started(event: GestureEvent) {\n    // Capture initial state to apply deltas with in `changed`\n    originalSize     = photo.size\n    originalCenter   = this@container.toLocal(event.center, photo)\n    originalVector   = event.initial[1].inParent(photo) - event.initial[0].inParent(photo)\n    originalPosition = photo.position\n    initialTransform = photo.transform\n\n    event.consume() // ensure event is consumed from Resizer\n}\n")),(0,a.kt)("h3",{id:"handling-gesture-updates"},"Handling Gesture Updates"),(0,a.kt)("p",null,"The values recorded in ",(0,a.kt)("inlineCode",{parentName:"p"},"started")," are used--along with the new state--in the ",(0,a.kt)("inlineCode",{parentName:"p"},"changed")," event to update the selected photo."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun changed(event: GestureEvent) {\n    val currentVector = event.current[1].inParent(photo) - event.current[0].inParent(photo)\n\n    // Angle between initial set of points and their current locations\n    val transformAngle = atan2(\n        originalVector.x * currentVector.y - originalVector.y * currentVector.x,\n        originalVector.x * currentVector.x + originalVector.y * currentVector.y\n    )\n\n    // Use transform for rotation\n    photo.transform = initialTransform.rotate(around = originalCenter, by = transformAngle)\n\n    // Update bounds instead of scale transformation\n    photo.bounds = Rectangle(\n            originalPosition - ((originalPosition - originalCenter) * (1 - event.scale)),\n            originalSize * event.scale)\n\n    event.consume() // ensure event is consumed from Resizer\n}\n")))}g.isMDXComponent=!0}}]);