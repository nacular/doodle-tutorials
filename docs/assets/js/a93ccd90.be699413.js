"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[858],{1907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>k,frontMatter:()=>p,metadata:()=>c,toc:()=>m});var o=t(7462),i=(t(7294),t(3905)),a=(t(8209),t(5488)),l=t(5162),s=t(6823),r=t(3138);const p={title:"Todo",hide_title:!0},d="[Todo](https://github.com/nacular/doodle-tutorials/tree/master/Todo) Tutorial",c={unversionedId:"todo",id:"todo",title:"Todo",description:"This tutorial shows how you might build the TodoMVC app using Doodle. This version deviates from the official app spec in that (like all Doodle apps) it does not use CSS or HTML directly. Therefore, it does not include the assets provided by the official spec. Instead, it replicates the UX with Doodle primitives.",source:"@site/docs/todo.mdx",sourceDirName:".",slug:"/todo",permalink:"/doodle-tutorials/docs/todo",draft:!1,tags:[],version:"current",frontMatter:{title:"Todo",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Calculator",permalink:"/doodle-tutorials/docs/calculator"},next:{title:"Photos",permalink:"/doodle-tutorials/docs/photos"}},u={},m=[{value:"Project Setup",id:"project-setup",level:2},{value:"Defining Our Application",id:"defining-our-application",level:2},{value:"Creating A Fullscreen App",id:"creating-a-fullscreen-app",level:2},{value:"Supporting Docs Embedding",id:"supporting-docs-embedding",level:2}],h={toc:m};function k(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"todo-tutorial"},(0,i.kt)("a",{parentName:"h1",href:"https://github.com/nacular/doodle-tutorials/tree/master/Todo"},"Todo")," Tutorial"),(0,i.kt)("p",null,"This tutorial shows how you might build the ",(0,i.kt)("a",{parentName:"p",href:"http://todomvc.com"},"TodoMVC")," app using Doodle. This version deviates from the official app spec in that (like all Doodle apps) it does not use CSS or HTML directly. Therefore, it does not include the assets provided by the official spec. Instead, it replicates the UX with Doodle primitives."),(0,i.kt)("p",null,"This version is also designed to work well as an embedded app. The version below (unlike the full-screen version) does not use routing for the filters. This means there is no way to deep-link to a filter, like the full-screen version has. The launch code decides this by injecting a different strategy for creating the filter buttons, while the app itself is unaware of this difference."),(0,i.kt)(r.B,{functionName:"todo",height:"700",mdxType:"DoodleCodeBlock"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also see the full-screen app ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-tutorials/todo"},"here"),".")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"project-setup"},"Project Setup"),(0,i.kt)("p",null,"We will use a multi-platform library setup for this app, with a multiplatform launcher that depends on it. This is not necessary to use Doodle. You could create a single multiplatform build with the common parts of your app in ",(0,i.kt)("inlineCode",{parentName:"p"},"commonMain")," etc.. This setup is used here because these apps are also launched by an app within ",(0,i.kt)("inlineCode",{parentName:"p"},"DocApps")," when embedding them like below. Therefore, we need a pure library for each app. This is why there is an app and a runner."),(0,i.kt)("mermaid",{value:" classDiagram\n      Todo      <|-- TodoRunner\n      Todo      <|-- DocApps\n      TodoRunner: jvmMain.main\n      TodoRunner: jsMain.main\n      DocApps   : main"}),(0,i.kt)(a.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"Todo",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/build.gradle.kts"},(0,i.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform"       )\n    kotlin("plugin.serialization")\n}\n\nkotlin {\n    jsTargets (BOTH)\n    jvmTargets()\n\n    val mockkVersion        : String by project\n    val doodleVersion       : String by project\n    val coroutinesVersion   : String by project\n    val serializationVersion: String by project\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(kotlin("stdlib-common"))\n                api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")\n                api("org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion")\n\n                api("io.nacular.doodle:core:$doodleVersion"    )\n                api("io.nacular.doodle:themes:$doodleVersion"  )\n                api("io.nacular.doodle:controls:$doodleVersion")\n            }\n        }\n\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin("test-common"))\n                implementation(kotlin("test-annotations-common"))\n            }\n        }\n\n        jvm().compilations["test"].defaultSourceSet {\n            dependencies {\n                implementation(kotlin("test-junit"))\n                implementation("io.mockk:mockk:$mockkVersion")\n            }\n        }\n\n        js().compilations["test"].defaultSourceSet {\n            dependencies {\n                implementation(kotlin("test-js"))\n            }\n        }\n    }\n}')),(0,i.kt)(l.Z,{value:"TodoRunner",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/TodoRunner/build.gradle.kts"},(0,i.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform")\n    application\n}\n\nkotlin {\n    js {\n        browser()\n        binaries.executable()\n    }\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion: String by project\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(project(":Todo"))\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion")\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val targetArch = when (val osArch = System.getProperty("os.arch")) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "${targetOs}-${targetArch}"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion")\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("MainKt")\n}\n\ninstallFullScreenDemo("Development")\ninstallFullScreenDemo("Production" )'))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"defining-our-application"},"Defining Our Application"),(0,i.kt)("p",null,"All Doodle apps must implement the ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications"},(0,i.kt)("inlineCode",{parentName:"a"},"Application"))," interface. The framework will then initialize our app via the constructor."),(0,i.kt)("p",null,"Doodle apps can be defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"commonMain"),", since they do not require any platform-specific dependencies. Therefore, we will do the same and place ours in ",(0,i.kt)("inlineCode",{parentName:"p"},"commonMain/kotlin/io/nacular/doodle/examples"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/src/commonMain/kotlin/io/nacular/doodle/examples/TodoApp.kt#L11"},(0,i.kt)("strong",{parentName:"a"},"TodoApp.kt"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TodoApp(display: Display, /*...*/): Application {\n    init {\n        // Launch coroutine to fetch fonts/images\n        GlobalScope.launch {\n            val titleFont  = fonts            { family = "Helvetica Neue"; size = 100; weight = 100 }\n            val listFont   = fonts(titleFont) {                            size =  24               }\n            val footerFont = fonts(titleFont) {                            size =  10               }\n\n            // install theme\n            themes.selected = theme\n\n            display += TodoView(/*...*/)\n\n            display.layout = constrain(display.children[0]) { fill(it) }\n\n            display.fill(config.appBackground.paint)\n        }\n    }\n\n    override fun shutdown() { /* no-op */ }\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"shutdown")," is a no-op, since we don't have any cleanup to do when the app closes.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"creating-a-fullscreen-app"},"Creating A Fullscreen App"),(0,i.kt)("p",null,"Doodle apps can be ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications"},"launched")," in a few different ways. We create a helper to launch the app in ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications#top-level-apps"},"full screen"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/src/jsMain/kotlin/io/nacular/doodle/examples/FullScreen.kt#L12"},(0,i.kt)("strong",{parentName:"a"},"FullScreen.kt"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package io.nacular.doodle.examples\n\n//...\n\nfun fullScreen() {\n    application(modules = listOf(FontModule, PointerModule, KeyboardModule, basicLabelBehavior(),\n        nativeTextFieldBehavior(), nativeHyperLinkBehavior(), nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            bind<ImageLoader>         () with singleton { ImageLoaderImpl         (instance(), instance()            ) }\n            bind<PersistentStore>     () with singleton { LocalStorePersistence   (                                  ) }\n            bind<NativeLinkStyler>    () with singleton { NativeLinkStylerImpl    (instance()                        ) }\n            bind<DataStore>           () with singleton { DataStore               (instance()                        ) }\n            bind<Router>              () with singleton { TrivialRouter           (window                            ) }\n            bind<FilterButtonProvider>() with singleton { LinkFilterButtonProvider(instance(), instance(), instance()) }\n        }\n    )) {\n        // load app\n        TodoApp(instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance())\n    }\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Normally this would just be your ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function. But ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," would prevent the app from being used as a library. Which is what happens to allow both an embedded (in the docs) and full-screen version.")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"application")," function to launch top-level apps. It takes a list of modules, and a lambda that builds the app. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via ",(0,i.kt)("inlineCode",{parentName:"p"},"instance"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"provider"),", etc."),(0,i.kt)("p",null,"Notice that we have included several modules for our app. This includes one for fonts, pointer, keyboard, and several for various View ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/rendering/behaviors"},(0,i.kt)("inlineCode",{parentName:"a"},"Behaviors"))," (i.e. ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-api/browser/io.nacular.doodle.theme.native/-native-theme/-companion/native-text-field-behavior.html"},(0,i.kt)("inlineCode",{parentName:"a"},"nativeTextFieldBehavior()")),") which loads the native behavior for TextFields. We also define some bindings directly in a new module. These are items with no built-in module, or items that only exist in our app code."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Check out Kodein to learn more about how it handles dependency injection.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"application")," function also takes an optional HTML element within which the app will be hosted. The app will be hosted in ",(0,i.kt)("inlineCode",{parentName:"p"},"document.body")," if you do not specify an element."),(0,i.kt)("p",null,"App launching is the only part of our code that is platform-specific; since it is the only time we might care about an HTML element. It also helps support embedding apps into non-Doodle contexts."),(0,i.kt)("h2",{id:"supporting-docs-embedding"},"Supporting Docs Embedding"),(0,i.kt)("p",null,"These docs actually launch the app using a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," with a slightly different set of inputs. The big difference is in ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterButtonProvider")," used. The docs inject a provider that creates ",(0,i.kt)("inlineCode",{parentName:"p"},"PushButton"),"s instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"HyperLink"),"s for the filter controls. The app itself treats these the same. The end result is that the docs version does not use routing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Notice the element is provided for embedded version\napplication(root = element, modules = listOf(FontModule, PointerModule, KeyboardModule, basicLabelBehavior(),\n        nativeTextFieldBehavior(), nativeHyperLinkBehavior(), nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            // ...\n\n            // Different behavior for docs version\n            bind<FilterButtonProvider>() with singleton { EmbeddedFilterButtonProvider(instance()) }\n        }\n)) {\n    // load app just like full-screen\n    TodoApp(instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance())\n}\n')))}k.isMDXComponent=!0}}]);