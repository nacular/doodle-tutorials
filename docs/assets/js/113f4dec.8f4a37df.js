"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50],{7988:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>h,metadata:()=>t,sourceTree:()=>u,toc:()=>x});const t=JSON.parse('{"id":"animatingform","title":"Animating Form","description":"AnimatingForm Tutorial","source":"@site/docs/animatingform.mdx","sourceDirName":".","slug":"/animatingform","permalink":"/doodle-tutorials/docs/animatingform","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Animating Form","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/doodle-tutorials/docs/introduction"},"next":{"title":"Timed Cards","permalink":"/doodle-tutorials/docs/timedcards"}}');var o=i(4848),a=i(8453),r=(i(4865),i(9365),i(854)),s=i(9053),l=i(7020);const d='@file:Suppress("OPT_IN_USAGE")\n\nimport org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11\n\n//sampleStart\nplugins {\n    kotlin("multiplatform")\n}\n\nkotlin {\n    js     { browser { binaries.executable() } }                               // Web     (JS  ) executable\n    wasmJs { browser { binaries.executable() } }                               // Web     (WASM) executable\n    jvm    {                                                                   // Desktop (JVM ) executable\n        compilerOptions { jvmTarget.set(JVM_11) }                              // JVM 11 is needed for Desktop\n        mainRun         { mainClass.set("io.nacular.doodle.examples.MainKt") } // Desktop entry point\n    }\n\n    sourceSets {\n        // Source set for all platforms\n        commonMain.dependencies {\n            api(libs.coroutines.core) // async photo loading\n\n            implementation(libs.doodle.controls )\n            implementation(libs.doodle.animation)\n            implementation(libs.doodle.themes   )\n        }\n\n        // Web (JS) platform source set\n        jsMain.dependencies {\n            implementation(libs.doodle.browser)\n        }\n\n        // Web (WASM) platform source set\n        wasmJsMain.dependencies {\n            implementation(libs.doodle.browser)\n        }\n\n        // Desktop (JVM) platform source set\n        jvmMain.dependencies {\n            // helper to derive OS/architecture pair\n            when (osTarget()) {\n                "macos-x64"     -> implementation(libs.doodle.desktop.jvm.macos.x64    )\n                "macos-arm64"   -> implementation(libs.doodle.desktop.jvm.macos.arm64  )\n                "linux-x64"     -> implementation(libs.doodle.desktop.jvm.linux.x64    )\n                "linux-arm64"   -> implementation(libs.doodle.desktop.jvm.linux.arm64  )\n                "windows-x64"   -> implementation(libs.doodle.desktop.jvm.windows.x64  )\n                "windows-arm64" -> implementation(libs.doodle.desktop.jvm.windows.arm64)\n            }\n        }\n    }\n}\n//sampleEnd\n\n// could be moved to buildSrc, but kept here for clarity\nfun osTarget(): String {\n    val osName = System.getProperty("os.name")\n    val targetOs = when {\n        osName == "Mac OS X"       -> "macos"\n        osName.startsWith("Win"  ) -> "windows"\n        osName.startsWith("Linux") -> "linux"\n        else                       -> error("Unsupported OS: $osName")\n    }\n\n    val targetArch = when (val osArch = System.getProperty("os.arch")) {\n        "x86_64", "amd64" -> "x64"\n        "aarch64"         -> "arm64"\n        else              -> error("Unsupported arch: $osArch")\n    }\n\n    return "${targetOs}-${targetArch}"\n}',c='package io.nacular.doodle.examples\n\nimport io.nacular.doodle.animation.Animator\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.examples.AnimatingFormApp.AppFonts\nimport io.nacular.doodle.geometry.PathMetrics\nimport io.nacular.doodle.layout.Insets\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.native.NativeTextFieldStyler\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.launch\n\n/**\n * Simple app that places a [AnimatingForm] at the center of the display.\n */\n//sampleStart\nclass AnimatingFormApp(\n    display        : Display,\n    fonts          : FontLoader,\n    animator       : Animator,\n    textMetrics    : TextMetrics,\n    pathMetrics    : PathMetrics,\n    theme          : Theme,\n    themeManager   : ThemeManager,\n    textFieldStyler: NativeTextFieldStyler,\n): Application {\n    data class AppFonts(val header: Font, val body: Font, val button: Font, val textField: Font)\n\n    init {\n        themeManager.selected = theme\n\n        val appScope = CoroutineScope(SupervisorJob() + Dispatchers.Default)\n\n        appScope.launch {\n            // creat and display the animating form\n            with(display) {\n                this += AnimatingForm(\n                    fonts           = appFonts(fonts),\n                    animate         = animator,\n                    pathMetrics     = pathMetrics,\n                    textMetrics     = textMetrics,\n                    textFieldStyler = textFieldStyler,\n                )\n\n                layout = constrain(first(), fill(Insets(50.0)))\n\n                fill(Lightgray.paint)\n            }\n        }\n    }\n\n    override fun shutdown() { /* no-op */ }\n}\n//sampleEnd\n\nprivate suspend fun appFonts(fonts: FontLoader): AppFonts {\n    val headerFont = fonts("gothampro_medium.ttf") {\n        family = "GothamPro Medium"\n        weight = 700\n        size   = 38\n    }!!\n\n    val bodyFont = fonts("gothampro_light.ttf") {\n        family = "GothamPro Light"\n        size   = 18\n    }!!\n\n    val buttonFont = fonts(headerFont) {\n        size = 16\n    }!!\n\n    val textFieldFont = fonts(bodyFont) {\n        size   = 14\n        weight = 400\n    }!!\n\n    return AppFonts(body = bodyFont, header = headerFont, textField = textFieldFont, button = buttonFont)\n}',h={title:"Animating Form",hide_title:!0},p=void 0,m={},u=(0,l.a)([{label:"src",children:[{label:"commonMain",children:[{label:"kotlin"},{label:"resources"}]},{label:"jsMain",children:[{label:"kotlin"},{label:"resources"}]},{label:"jvmMain",children:[{label:"kotlin"}]},{label:"wasmJsMain",children:[{label:"kotlin"},{label:"resources"}]}]},{label:"build.gradle.kts"}]),x=[{value:"Project Setup",id:"project-setup",level:2},{value:"The Application",id:"the-application",level:2},{value:"View Setup",id:"view-setup",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{children:(0,o.jsx)("a",{class:"inline-github-link",href:"https://github.com/nacular/doodle-tutorials/tree/master/AnimatingForm",target:"_blank",children:"AnimatingForm Tutorial"})}),"\n",(0,o.jsxs)(n.p,{children:["This app was inspired by ",(0,o.jsx)(n.a,{href:"https://dribbble.com/shots/5311359-Diprella-Login",children:'Selecto\'s "Diprella Login"'}),". This app is multi-platform, which means it will run in the browser and as a desktop application."]}),"\n",(0,o.jsx)(s.I,{function:"animatingForm",height:"700"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can also see the full-screen app here: ",(0,o.jsx)(n.a,{href:"https://nacular.github.io/doodle-tutorials/animatingform",children:"JavaScript"}),", ",(0,o.jsx)(n.a,{href:"https://nacular.github.io/doodle-tutorials/animatingform_wasm",children:"WebAssembly"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,o.jsx)(n.p,{children:"The app will use a Kotlin Multiplatform setup, which means we can run it on a range of targets supported by Doodle. The directory structure follows a fairly common layout, with common classes and resources in one source set and platform-specific items in their own."}),"\n","\n",(0,o.jsx)(n.admonition,{title:"Directory Layout",type:"info",children:(0,o.jsxs)(l.k,{items:u,defaultExpandedItems:["src","src/commonMain"],defaultSelectedItem:"src",children:[(0,o.jsxs)("div",{value:"src",children:[(0,o.jsxs)(n.p,{children:["All source code and resources are located under the ",(0,o.jsx)(n.code,{children:"src"})," directory."]}),(0,o.jsxs)(n.p,{children:["The application logic itself is located in the common source set (",(0,o.jsx)(n.code,{children:"src/commonMain"}),"), which means it is entirely reused for each platform. In fact, the same app is used unchanged (just targeting JS) within this documentation."]})]}),(0,o.jsx)("div",{value:"src/commonMain",children:(0,o.jsxs)(n.p,{children:["Source code and resources for that are usable for platforms are stored in ",(0,o.jsx)(n.code,{children:"commonMain"}),". This app is designed to work on all platforms, so our app code and all logic is found under this directory."]})}),(0,o.jsxs)("div",{value:"src/commonMain/kotlin",children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"kotlin"})," directory is where all code for a platform resides. In this case, we have all the classes for our app, including ",(0,o.jsx)(n.code,{children:"AnimatingFormApp"})," and ",(0,o.jsx)(n.code,{children:"AnimatingForm"}),"."]}),(0,o.jsx)(n.p,{children:"All of these classes are platform agnostic and used by all targets. This makes our app work on any target Doodle supports."})]}),(0,o.jsx)("div",{value:"src/commonMain/resources",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"resources"})," directory is where resources for a platform resides. In this case, it includes fonts."]})}),(0,o.jsx)("div",{value:"src/jsMain",children:(0,o.jsxs)(n.p,{children:["Source code and resources that are needed for Web (JS) target are stored in ",(0,o.jsx)(n.code,{children:"jsMain"}),". Our app is platform agnostic except for the launch portion, which is located in the source below this directory."]})}),(0,o.jsx)("div",{value:"src/jsMain/kotlin",children:(0,o.jsxs)(n.p,{children:["The Web launch portion of our app is located here in the program's ",(0,o.jsx)(n.code,{children:"main"})," function."]})}),(0,o.jsx)("div",{value:"src/jsMain/resources",children:(0,o.jsxs)(n.p,{children:["Holds the ",(0,o.jsx)(n.code,{children:"index.html"})," file that loads the generated JS file produced for the Web (JS) target."]})}),(0,o.jsx)("div",{value:"src/jvmMain",children:(0,o.jsxs)(n.p,{children:["Source code and resources that are needed for Desktop (JVM) target are stored in ",(0,o.jsx)(n.code,{children:"jvmMain"}),"."]})}),(0,o.jsx)("div",{value:"src/jvmMain/kotlin",children:(0,o.jsxs)(n.p,{children:["The Desktop launch portion of our app is located here in the program's ",(0,o.jsx)(n.code,{children:"main"})," function."]})}),(0,o.jsx)("div",{value:"src/wasmJsMain",children:(0,o.jsxs)(n.p,{children:["Source code and resources that are needed for Web (WASM) target are stored in ",(0,o.jsx)(n.code,{children:"wasmJsMain"}),". Our app is platform agnostic except for the launch portion, which is located in the source below this directory."]})}),(0,o.jsx)("div",{value:"src/wasmJsMain/kotlin",children:(0,o.jsxs)(n.p,{children:["The Web launch portion of our app is located here in the program's ",(0,o.jsx)(n.code,{children:"main"})," function."]})}),(0,o.jsx)("div",{value:"src/wasmJsMain/resources",children:(0,o.jsxs)(n.p,{children:["Holds the ",(0,o.jsx)(n.code,{children:"index.html"})," file that loads the generated JS file produced for the Web (WASM) target."]})}),(0,o.jsx)("div",{value:"build.gradle.kts",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"build.gradle.kts"})," file defines how the app is configured and all its dependencies. The AnimatingForms app uses a multi-platform configuration so it can run on all Doodle supported targets."]})})]})}),"\n",(0,o.jsxs)(n.p,{children:["Doodle apps are built using gradle like other Kotlin apps. The build is controlled by the ",(0,o.jsx)(n.code,{children:"build.gradle.kts"})," script in the root of the ",(0,o.jsx)(n.code,{children:"AnimatingForm"})," directory."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"build.gradle.kts"})}),"\n",(0,o.jsx)(r.v,{children:d}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The gradle build uses ",(0,o.jsx)(n.a,{href:"https://docs.gradle.org/current/userguide/version_catalogs.html",children:"gradle version catalogs"}),"; see ",(0,o.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/gradle/libs.versions.toml",children:"libs.versions.toml"})," file for library info."]})}),"\n",(0,o.jsx)(n.h2,{id:"the-application",children:"The Application"}),"\n",(0,o.jsxs)(n.p,{children:["All Doodle apps must implement the ",(0,o.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/applications",children:(0,o.jsx)(n.code,{children:"Application"})})," interface. The framework will then initialize our app via the constructor. Our app will be fairly simple: just create an instance of our calculator and add it to the display."]}),"\n",(0,o.jsxs)(n.p,{children:["Doodle apps can be defined in ",(0,o.jsx)(n.code,{children:"commonMain"}),", since they do not require any platform-specific dependencies (we will do this as well). They can also be ",(0,o.jsx)(n.a,{href:"https://nacular.github.io/doodle/docs/applications",children:"launched"})," in a few different ways on Web and Desktop. Use the ",(0,o.jsx)(n.code,{children:"application"})," function in a platform source-set (i.e. ",(0,o.jsx)(n.code,{children:"jsMain"}),", ",(0,o.jsx)(n.code,{children:"jvmMain"}),", etc.) to launch top-level apps. It takes a list of modules to load and a lambda that builds the app. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via ",(0,o.jsx)(n.code,{children:"instance"}),", ",(0,o.jsx)(n.code,{children:"provider"}),", etc."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/AnimatingForm/src/commonMain/kotlin/io/nacular/doodle/examples/AnimatingFormApp.kt#L28",children:(0,o.jsx)(n.strong,{children:"AnimatingFormApp.kt"})})}),"\n",(0,o.jsx)(r.v,{children:c}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Notice that ",(0,o.jsx)(n.code,{children:"shutdown"})," is a no-op, since we don't have any cleanup to do when the app closes."]})}),"\n",(0,o.jsx)(n.h2,{id:"view-setup",children:"View Setup"}),"\n",(0,o.jsxs)(n.p,{children:["This app uses a single top-level view with 3 layered children to achieve the animation effect. The root view is the ",(0,o.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/AnimatingForm/src/commonMain/kotlin/io/nacular/doodle/examples/AnimatingForm.kt#L71",children:(0,o.jsx)(n.code,{children:"AnimatingForm"})}),' view. It orchestrates its children to pull everything together. It is also responsible for a small portion of the rendering (the rounded corners and "overflowing shapes").']}),"\n",(0,o.jsxs)(n.p,{children:["The first child (defined by the ",(0,o.jsx)(n.a,{href:"https://github.com/nacular/doodle-tutorials/blob/master/AnimatingForm/src/commonMain/kotlin/io/nacular/doodle/examples/AnimatingForm.kt#L78",children:(0,o.jsx)(n.code,{children:"FormSwitcher"})})," class) contains the sign-in/up button that serves to switch the forms. It also provides the parallax effect through the way it renders its contents."]}),"\n",(0,o.jsxs)(n.p,{children:["The other two children represent the sign-in and sign-up forms. They slide back and forth in lock step as the animation progresses. The illusion is achieved by hiding and showing them based on the animation progress. This switch coincides with all 3 views being aligned and the same size, so the ",(0,o.jsx)(n.code,{children:"FormSwitcher"})," hides the change seamlessly."]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}}}]);