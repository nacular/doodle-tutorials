"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[444],{7583:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>m,default:()=>k,frontMatter:()=>d,metadata:()=>u,toc:()=>b});var a=n(7462),i=(n(7294),n(3905)),o=n(8561),r=n(5488),l=n(5162),s=n(3138),p=n(814);const d={title:"Animating Tab Strip",hide_title:!0},m="[TabStrip](https://github.com/nacular/doodle-tutorials/tree/master/TabStrip) Tutorial",u={unversionedId:"tabstrip",id:"tabstrip",title:"Animating Tab Strip",description:"We will build a simple app that hosts animating tab selection component in this tutorial. It is inspired by Cuberto's Animated Tabbar and this JS impl. This app will be multi-platform, which means it will run in the browser and as a desktop application.",source:"@site/docs/tabstrip.mdx",sourceDirName:".",slug:"/tabstrip",permalink:"/doodle-tutorials/docs/tabstrip",draft:!1,tags:[],version:"current",frontMatter:{title:"Animating Tab Strip",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Contacts",permalink:"/doodle-tutorials/docs/contacts"},next:{title:"Calculator",permalink:"/doodle-tutorials/docs/calculator"}},c={},b=[{value:"Project Setup",id:"project-setup",level:2}],h={toc:b};function k(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tabstrip-tutorial"},(0,i.kt)("a",{parentName:"h1",href:"https://github.com/nacular/doodle-tutorials/tree/master/TabStrip"},"TabStrip")," Tutorial"),(0,i.kt)("p",null,"We will build a simple app that hosts animating tab selection component in this tutorial. It is inspired by ",(0,i.kt)("a",{parentName:"p",href:"https://dribbble.com/shots/14723171-Animated-Tabbar"},"Cuberto's Animated Tabbar")," and this ",(0,i.kt)("a",{parentName:"p",href:"https://codepen.io/aaroniker/pen/rNMmZvq?editors=0110"},"JS impl"),". This app will be multi-platform, which means it will run in the browser and as a desktop application."),(0,i.kt)("p",null,"The main focus will be utilizing Doodle's powerful animation APIs to create smooth transitions with precise timings. You can read more about how Doodle animations work in the ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/animations"},"docs"),"."),(0,i.kt)(s.B,{functionName:"tabStrip",height:"400",mdxType:"DoodleCodeBlock"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also see the full-screen app ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-tutorials/tabstrip"},"here"),".")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"project-setup"},"Project Setup"),(0,i.kt)("p",null,"This app (like the others in this tutorial) is created as a multi-platform library, with a multiplatform launcher that depends on it.\nThis is not necessary to use Doodle. You could create a single multiplatform build with the common parts of your app\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"commonMain")," etc.. This setup is used here because the app are also launched by an app within ",(0,i.kt)("inlineCode",{parentName:"p"},"DocApps")," when embedding it\nlike below. Therefore, we need a pure library for the app. This is why there is an app and a runner."),(0,i.kt)(o.G,{chart:" classDiagram\n      TabStrip      <|-- TabStripRunner\n      TabStrip      <|-- DocApps\n      TabStripRunner: commonMain.resources\n      TabStripRunner: jvmMain.main\n      TabStripRunner: jsMain.main\n      DocApps       : main\n      TabStrip      : commonMain\n      TabStrip      : jvmMain\n      TabStrip      : jsMain",mdxType:"Mermaid"}),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"TabStrip",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/TabStrip/build.gradle.kts"},(0,i.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,i.kt)(p.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform")\n}\n\nkotlin {\n    jsTargets (BOTH)\n    jvmTargets()\n\n    val doodleVersion: String by project\n\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(kotlin("stdlib-common"))\n                api("io.nacular.doodle:core:$doodleVersion"     )\n                api("io.nacular.doodle:controls:$doodleVersion" )\n                api("io.nacular.doodle:animation:$doodleVersion")\n            }\n        }\n    }\n}')),(0,i.kt)(l.Z,{value:"TabStripRunner",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/TabStrip/build.gradle.kts"},(0,i.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,i.kt)(p.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform")\n    application\n}\n\nkotlin {\n    js {\n        browser()\n        binaries.executable()\n    }\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion: String by project\n\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(project(":TabStrip"))\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion")\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val targetArch = when (val osArch = System.getProperty("os.arch")) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "${targetOs}-${targetArch}"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion")\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("io.nacular.doodle.examples.MainKt")\n}\n\ninstallFullScreenDemo("Development")\ninstallFullScreenDemo("Production" )'))),(0,i.kt)("hr",null))}k.isMDXComponent=!0}}]);