"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[376],{9065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>k,frontMatter:()=>p,metadata:()=>u,toc:()=>m});var a=n(7462),o=(n(7294),n(3905)),i=(n(8209),n(5488)),l=n(5162),r=n(3138),s=n(6823);const p={title:"Calculator",hide_title:!0},d="[Calculator](https://github.com/nacular/doodle-tutorials/tree/master/Calculator) Tutorial",u={unversionedId:"calculator",id:"calculator",title:"Calculator",description:"Our goal is to build the following calculator app using Doodle. This is a simple calculator that only",source:"@site/docs/calculator.mdx",sourceDirName:".",slug:"/calculator",permalink:"/doodle-tutorials/docs/calculator",draft:!1,tags:[],version:"current",frontMatter:{title:"Calculator",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Contacts",permalink:"/doodle-tutorials/docs/contacts"},next:{title:"Todo",permalink:"/doodle-tutorials/docs/todo"}},c={},m=[{value:"Project Setup",id:"project-setup",level:2},{value:"Defining Our Application",id:"defining-our-application",level:2},{value:"Launching on Web and Desktop",id:"launching-on-web-and-desktop",level:2},{value:"Creating A Fullscreen Web App",id:"creating-a-fullscreen-web-app",level:2},{value:"The Calculator View",id:"the-calculator-view",level:2},{value:"Calculator Output",id:"calculator-output",level:3},{value:"More Dependencies",id:"more-dependencies",level:2},{value:"The Buttons",id:"the-buttons",level:2},{value:"Button Styling",id:"button-styling",level:2},{value:"Custom Hit Detection",id:"custom-hit-detection",level:2},{value:"Testing",id:"testing",level:2}],h={toc:m};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"calculator-tutorial"},(0,o.kt)("a",{parentName:"h1",href:"https://github.com/nacular/doodle-tutorials/tree/master/Calculator"},"Calculator")," Tutorial"),(0,o.kt)("p",null,"Our goal is to build the following calculator app using Doodle. This is a simple calculator that only\nperforms addition, subtraction, multiplication, and division. It also supports negative values, decimals,\nand has a convenience function for converting to a percentage."),(0,o.kt)("p",null,"However, it does not have more advanced features, like parentheses, or other math operations. This means\nthe implementation is simpler, and we can focus on the way Doodle is used instead of the complexity of the\napp itself. Play around with the calculator to get a feel for it."),(0,o.kt)(r.B,{functionName:"calculator",height:"500",mdxType:"DoodleCodeBlock"}),(0,o.kt)("p",null,"You can also see the full-screen app ",(0,o.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-tutorials/calculator"},"here"),"."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"project-setup"},"Project Setup"),(0,o.kt)("p",null,"We will use a multi-platform library setup for this app, with a multiplatform launcher that depends on it.\nThis is not necessary to use Doodle. You could create a single multiplatform build with the common parts of your app\nin ",(0,o.kt)("inlineCode",{parentName:"p"},"commonMain")," etc.. This setup is used here because these apps are also launched by an app within ",(0,o.kt)("inlineCode",{parentName:"p"},"DocApps")," when embedding them\nlike below. Therefore, we need a pure library for each app. This is why there is an app and a runner."),(0,o.kt)("mermaid",{value:" classDiagram\n      Calculator <|-- CalculatorRunner\n      Calculator <|-- DocApps\n      CalculatorRunner: jvmMain.main\n      CalculatorRunner: jsMain.main\n      DocApps         : main"}),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Calculator",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/build.gradle.kts"},(0,o.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,o.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform")\n}\n\nkotlin {\n    // Defined in buildSrc/src/main/kotlin/Common.kt\n    jsTargets (BOTH)\n    jvmTargets()\n\n    // Defined in gradle.properties\n    val mockkVersion     : String by project\n    val doodleVersion    : String by project\n    val coroutinesVersion: String by project\n\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(kotlin("stdlib-common"))\n                api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")\n\n                api("io.nacular.doodle:core:$doodleVersion"    ) // required for Doodle\n                api("io.nacular.doodle:controls:$doodleVersion") // provides things like buttons and panels\n            }\n        }\n\n        commonTest {\n            dependencies {\n                implementation(kotlin("test-common"))\n                implementation(kotlin("test-annotations-common"))\n            }\n        }\n\n        jvm().compilations["test"].defaultSourceSet {\n            dependencies {\n                implementation(kotlin("test-junit"))\n                implementation("io.mockk:mockk:$mockkVersion")\n            }\n        }\n\n        js().compilations["test"].defaultSourceSet {\n            dependencies {\n                implementation(kotlin("test-js"))\n            }\n        }\n    }\n}')),(0,o.kt)(l.Z,{value:"CalculatorRunner",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/CalculatorRunner/build.gradle.kts"},(0,o.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,o.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'plugins {\n    kotlin("multiplatform")\n    application\n}\n\nkotlin {\n    js {\n        browser()\n        binaries.executable()\n    }\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion: String by project\n\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(project(":Calculator")) // app library\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion") // required for Web app\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val targetArch = when (val osArch = System.getProperty("os.arch")) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "${targetOs}-${targetArch}"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // required for Desktop app\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("io.nacular.doodle.examples.MainKt")\n}\n\ninstallFullScreenDemo("Development")\ninstallFullScreenDemo("Production" )'))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"defining-our-application"},"Defining Our Application"),(0,o.kt)("p",null,"All Doodle apps must implement the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/application/Application.kt#L4"},(0,o.kt)("inlineCode",{parentName:"a"},"Application")),"\ninterface. The framework will then initialize our app via the constructor. Our app will be fairly simple: just create\nan instance of our calculator and add it to the display."),(0,o.kt)("p",null,"Doodle apps can be defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"commonMain"),", since they do not require any platform-specific dependencies. Therefore, we will do\nthe same and place ours in ",(0,o.kt)("inlineCode",{parentName:"p"},"commonMain/kotlin/io/nacular/doodle/examples"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonMain/kotlin/io/nacular/doodle/examples/CalculatorApp.kt#L11"},(0,o.kt)("strong",{parentName:"a"},"CalculatorApp.kt"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"package io.nacular.doodle.examples\n\n// ...\n\nclass CalculatorApp(display: Display): Application {\n    init {\n        // creat and display a single Calculator\n        display += Calculator()\n    }\n\n    override fun shutdown() { /* no-op */ }\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"shutdown")," is a no-op, since we don't have any cleanup to do when the app closes.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"launching-on-web-and-desktop"},"Launching on Web and Desktop"),(0,o.kt)("p",null,"Doodle apps can be ",(0,o.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications"},"launched")," in a few different ways on Web and Desktop. We defined our app logic\nin a multi-platform ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," library (no ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," functions), so it can be used on both platforms. Notice that we are only using a library here because we also want\nto run the Calculator in our documentation app. That app will run it as an embedded Web app, which becomes easier if it is a library. Otherwise,\nwe could have defined our platform ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," functions directly in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," module. Instead, we created a separate ",(0,o.kt)("inlineCode",{parentName:"p"},"CalculatorRunner")," module that contains our ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," functions."),(0,o.kt)("h2",{id:"creating-a-fullscreen-web-app"},"Creating A Fullscreen Web App"),(0,o.kt)("p",null,"We create a helper to launch the app in ",(0,o.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications#top-level-apps"},"full screen"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/jsMain/kotlin/io/nacular/doodle/examples/FullScreen.kt#L12"},(0,o.kt)("strong",{parentName:"a"},"FullScreen.kt"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"package io.nacular.doodle.examples\n\n//...\n\nfun fullScreen() {\n    application(modules = listOf(PointerModule)) {\n        // load app\n        CalculatorApp(instance()) // provide the Display\n    }\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Normally this would just be your ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," function, but this would prevent the app from being used as a library. Which\nis what happens to allow both an embedded (in the docs) and full-screen version.")),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"application")," function to launch top-level apps. It takes a list of modules to and a lambda that builds the\napp. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via\n",(0,o.kt)("inlineCode",{parentName:"p"},"instance"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"provider"),", etc."),(0,o.kt)("p",null,"Notice that we have included the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L62"},(0,o.kt)("inlineCode",{parentName:"a"},"PointerModule")),".\nThis is needed to enable mouse or pointer interactions. Our app will not directly know we loaded this module, but pointer\nrelated events will only work because we have."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Check out Kodein to learn more about how it handles dependency injection.")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"application")," function also takes an optional HTML element within which the app will be hosted. The app will be hosted in\n",(0,o.kt)("inlineCode",{parentName:"p"},"document.body")," if no element is specified."),(0,o.kt)("p",null,"App launching is the only part of our code that is platform-specific. This makes sense, since it is the only time we might need to know\nabout an HTML element; say when embedding our app in a non-Doodle context."),(0,o.kt)("h2",{id:"the-calculator-view"},"The Calculator View"),(0,o.kt)("p",null,"We will implement our calculator as a single ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L65"},(0,o.kt)("inlineCode",{parentName:"a"},"View")),"\nthat manages its state directly. This makes sense for simple use-cases, but might not be the right choice for larger apps."),(0,o.kt)("p",null,"This View will be broken into a hierarchy of views, with two top-level items: a custom output and a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/GridPanel.kt#L42"},(0,o.kt)("inlineCode",{parentName:"a"},"GridPanel")),"."),(0,o.kt)("br",null),(0,o.kt)("img",{src:"/doodle-tutorials/calc-top2.png",alt:"calculator top"}),(0,o.kt)("img",{src:"/doodle-tutorials/calc-bottom2.png",alt:"calculator bottom",style:{float:"right"}}),(0,o.kt)("h3",{id:"calculator-output"},"Calculator Output"),(0,o.kt)("p",null,'The Output will be a really simple View that tracks a number and its text representation, which it will render to the screen.\nIt will also expose the number as the current "answer" on the calculator. Its most complex role is displaying the text with\nproper alignment and scaling to avoid any clipping.'),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Notice how the output text starts off center aligned with the operator buttons; and how it shrinks as the number grows\nbeyond the screen size.")),(0,o.kt)("p",null,"Take a look at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonMain/kotlin/io/nacular/doodle/examples/Calculator.kt#L48"},(0,o.kt)("strong",{parentName:"a"},"Output")),"\nclass, and you will see it has a ",(0,o.kt)("inlineCode",{parentName:"p"},"text")," property that it tracks the width of. It also uses ",(0,o.kt)("inlineCode",{parentName:"p"},"textTransform")," to perform the text scaling."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'private inner class Output: View() {\n    //...\n\n    // Transform used to scale text down as it grows beyond window width\n    private var textTransform = Identity\n\n    //...\n\n    /** Text representation of number */\n    var text = "0"\n        set(new) {\n            field = new\n\n            val textWidth   = textMetrics.width(field, font)\n            val windowWidth = width - inset * 2\n\n            // use transform when text grows beyond window width\n            textTransform = when {\n                textWidth > windowWidth -> (windowWidth/textWidth).let { Identity.scale(x = it, y = it, around = Point(width / 2, height)) }\n                else                    -> Identity\n            }\n\n            rerender()\n        }\n\n    //...\n\n    override fun render(canvas: Canvas) {\n        val textPosition = textMetrics.size(text, font).let {\n            val x = when {\n                textTransform.isIdentity -> width - it.width - inset\n                else                     -> (width - it.width) / 2\n            }\n\n            Point(x, height - it.height)\n        }\n\n        // scaling, if present, is applied to the canvas before text rendered\n        canvas.transform(textTransform) {\n            text(text, at = textPosition, font = font, color = foregroundColor ?: White)\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"more-dependencies"},"More Dependencies"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Output")," class, and others in ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," need things like fonts, and the ability to measure text. Doodle provides\nthese capabilities via interfaces like ",(0,o.kt)("inlineCode",{parentName:"p"},"FontDetector")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TextMetrics"),". These can be provided to ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," via\nconstructor injection."),(0,o.kt)("p",null,"That results in a constructor as follows:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonMain/kotlin/io/nacular/doodle/examples/Calculator.kt#L35"},(0,o.kt)("strong",{parentName:"a"},"Calculator.kt"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Calculator(\n        private val fonts          : FontDetector,\n        private val textMetrics    : TextMetrics,\n        private val numberFormatter: NumberFormatter\n): View() {\n}\n")),(0,o.kt)("p",null,"This means ",(0,o.kt)("inlineCode",{parentName:"p"},"CalculatorApp")," needs to be updated as well. We continue by injecting these dependencies there as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"package io.nacular.doodle.examples\n\n// ...\n\nclass CalculatorApp(\n        display        : Display,\n        textMetrics    : TextMetrics,\n        fontDetector   : FontDetector,\n        numberFormatter: NumberFormatter\n): Application {\n    init {\n        // creat and display a single Calculator\n        display += Calculator(fontDetector, textMetrics, numberFormatter)\n    }\n\n    override fun shutdown() { /* no-op */ }\n}\n")),(0,o.kt)("p",null,"Now ",(0,o.kt)("inlineCode",{parentName:"p"},"Main")," needs to provide these, along with Display, when constructing the app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'package io.nacular.doodle.examples\n\n//...\n\nfun main() {\n    application(modules = listOf(\n        PointerModule,\n        Module(name = "AppModule") {\n            // Used to get fonts that should\'ve been loaded\n            bind<FontDetector>() with singleton { FontDetectorImpl(instance(), instance(), instance()) }\n        }\n    )) {\n        // load app\n        CalculatorApp(instance(), instance(), instance(), NumberFormatterImpl())\n    }\n}\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"TextMetrics"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FontDetector")," is not included in Doodle's default modules, so we have to wire it explicitly.\nWe define a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," to do so because it has dependencies that can be injected as well.")),(0,o.kt)("h2",{id:"the-buttons"},"The Buttons"),(0,o.kt)("p",null,"We can manage the set of buttons within the calculator with a ",(0,o.kt)("inlineCode",{parentName:"p"},"GridPanel"),". This way we get the layout support it provides.\nThis results in the following initialization for ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonMain/kotlin/io/nacular/doodle/examples/Calculator.kt#L35"},(0,o.kt)("strong",{parentName:"a"},"Calculator.kt"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Calculator(/*...*/): View() {\n\n    //...\n\n    init {\n        GlobalScope.launch {\n            loadFonts()\n\n            ButtonGroup(allowDeselectAll = true, buttons = *arrayOf(`\xf7`, `*`, `-`, `+`))\n\n            val outputHeight  = 100.0\n            val buttonSpacing =  10.0\n\n            val gridPanel = GridPanel().apply {\n                add(clear, 0, 0); add(negate, 0, 1); add(`%`, 0, 2); add(`\xf7`, 0, 3)\n                add(`7`,   1, 0); add(`8`,    1, 1); add(`9`, 1, 2); add(`*`, 1, 3)\n                add(`4`,   2, 0); add(`5`,    2, 1); add(`6`, 2, 2); add(`-`, 2, 3)\n                add(`1`,   3, 0); add(`2`,    3, 1); add(`3`, 3, 2); add(`+`, 3, 3)\n                add(`0`,   4, 0,  columnSpan = 2  ); add(decimal, 4, 2); add(`=`,  4, 3)\n\n                verticalSpacing   = buttonSpacing\n                horizontalSpacing = buttonSpacing\n            }\n\n            children += listOf(output, gridPanel)\n\n            // Place output outside grid so the height can be more easily controlled\n            val constraints = constrain(output, gridPanel) { output, grid ->\n                output.top    = parent.top\n                output.left   = parent.left\n                output.right  = parent.right\n                output.height = constant(outputHeight)\n\n                grid.top      = output.bottom + buttonSpacing\n                grid.left     = output.left\n                grid.right    = output.right\n                grid.bottom   = parent.bottom\n            }\n\n            layout = object: Layout by constraints {\n                // Set total height to grid panel's ideal width and height, plus output and spacing\n                override fun idealSize(container: PositionableContainer, default: Size?) = gridPanel.idealSize?.let {\n                    Size(it.width, it.height + outputHeight + buttonSpacing)\n                }\n            }\n\n            // Force idealSize when gridPanel is laid out\n            gridPanel.sizePreferencesChanged += { _,_,new ->\n                idealSize = new.idealSize?.let { Size(it.width, it.height + outputHeight + buttonSpacing) }\n            }\n        }\n    }\n\n    //...\n}\n")),(0,o.kt)("p",null,"The initialization steps are: ",(0,o.kt)("strong",{parentName:"p"},"(1) load fonts"),", ",(0,o.kt)("strong",{parentName:"p"},"(2) setup buttons in GridPanel"),", ",(0,o.kt)("strong",{parentName:"p"},"(3) add Output and grid as children"),",\n",(0,o.kt)("strong",{parentName:"p"},"(4) configure the layout"),"."),(0,o.kt)("p",null,"This example uses non-standard/recommended property names for buttons to improve readability slightly. This also makes tests a little\nsimpler to understand."),(0,o.kt)("h2",{id:"button-styling"},"Button Styling"),(0,o.kt)("p",null,"The calculator buttons come in a few different color schemes. But they all share the same ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L7"},(0,o.kt)("inlineCode",{parentName:"a"},"Behavior")),",\ndefined by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonMain/kotlin/io/nacular/doodle/examples/CalcButtonBehavior.kt#L16"},(0,o.kt)("inlineCode",{parentName:"a"},"CalcButtonBehavior")),".\nButtons--like many Views--let you define their look-and-feel using a ",(0,o.kt)("inlineCode",{parentName:"p"},"Behavior"),". Ours is fairly simple; it draws the rounded rectangle\nfor the button background and centers the text above it. These are both managed with the right color based on the button's state.\nIt gets state tracking and text positioning for free via its base class: ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonTextButtonBehavior"),"."),(0,o.kt)("h2",{id:"custom-hit-detection"},"Custom Hit Detection"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CalcButtonBehavior")," provides a rounded style for our buttons. But the default hit-detection for Views is tied to their rectangular\nbounds. We can fix this by writing custom pointer hit-detection in our behavior."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CalcButtonBehavior(textMetrics: TextMetrics): CommonTextButtonBehavior<Button>(textMetrics) {\n    //...\n\n    override fun contains(view: Button, point: Point): Boolean {\n        val radius      = view.height / 2\n        val leftCircle  = Circle(center = Point(view.x + radius,            view.center.y), radius = radius)\n        val rightCircle = Circle(center = Point(view.bounds.right - radius, view.center.y), radius = radius)\n\n        return when {\n            point.x < radius              -> point in leftCircle\n            point.x > view.width - radius -> point in rightCircle\n            else                          -> point in view.bounds\n        }\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"contains(Button, Point)")," method is called by ",(0,o.kt)("inlineCode",{parentName:"p"},"Button"),' to check whether the pointer is within its bounds. This logic ensures\nthe pointer will only "hit" our button when it goes within the rounded rectangle.'),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"contains")," check provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"Point")," in the View's ",(0,o.kt)("strong",{parentName:"p"},"parent's")," coordinates.")),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Common code testing is one reason to use a multi-platform setup. Doodle is designed to avoid platform specific dependencies except in the\nsmall amount of launch code. This means we can easily test ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," and the other components by writing tests in ",(0,o.kt)("inlineCode",{parentName:"p"},"commonTest"),"\nand running them on the JVM target. One advantage is the speed of running these tests, since there are no external dependencies."),(0,o.kt)("p",null,"The tests in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Calculator/src/commonTest/kotlin/io/nacular/doodle/examples/CalculatorTests.kt#L13"},(0,o.kt)("inlineCode",{parentName:"a"},"CalculatorTests")),"\nare a bit contrived, but they illustrate how you might validate various parts of your app."))}k.isMDXComponent=!0}}]);